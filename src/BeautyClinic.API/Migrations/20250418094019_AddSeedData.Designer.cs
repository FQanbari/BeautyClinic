// <auto-generated />
using System;
using BeautyClinic.API.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyClinic.API.Migrations
{
    [DbContext(typeof(BeautyClinicDbContext))]
    [Migration("20250418094019_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndHour")
                        .HasColumnType("int");

                    b.Property<int>("EndMinute")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("StartHour")
                        .HasColumnType("int");

                    b.Property<int>("StartMinute")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeSpanMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 10,
                            EndMinute = 0,
                            ProviderId = 2,
                            StartHour = 9,
                            StartMinute = 0,
                            Status = 1,
                            TimeSpanMinute = 60
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 4, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 10,
                            EndMinute = 40,
                            ProviderId = 2,
                            StartHour = 10,
                            StartMinute = 0,
                            Status = 1,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 11,
                            EndMinute = 0,
                            ProviderId = 2,
                            StartHour = 10,
                            StartMinute = 40,
                            Status = 1,
                            TimeSpanMinute = 20
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 11,
                            EndMinute = 20,
                            ProviderId = 2,
                            StartHour = 11,
                            StartMinute = 0,
                            Status = 1,
                            TimeSpanMinute = 20
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 11,
                            EndMinute = 35,
                            ProviderId = 2,
                            StartHour = 11,
                            StartMinute = 20,
                            Status = 1,
                            TimeSpanMinute = 15
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 11,
                            EndMinute = 55,
                            ProviderId = 2,
                            StartHour = 11,
                            StartMinute = 35,
                            Status = 1,
                            TimeSpanMinute = 20
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 12,
                            EndMinute = 5,
                            ProviderId = 2,
                            StartHour = 11,
                            StartMinute = 55,
                            Status = 1,
                            TimeSpanMinute = 10
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 12,
                            EndMinute = 45,
                            ProviderId = 2,
                            StartHour = 12,
                            StartMinute = 5,
                            Status = 0,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 13,
                            EndMinute = 15,
                            ProviderId = 2,
                            StartHour = 13,
                            StartMinute = 5,
                            Status = 1,
                            TimeSpanMinute = 10
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 13,
                            EndMinute = 55,
                            ProviderId = 2,
                            StartHour = 13,
                            StartMinute = 15,
                            Status = 0,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 14,
                            EndMinute = 35,
                            ProviderId = 2,
                            StartHour = 14,
                            StartMinute = 20,
                            Status = 1,
                            TimeSpanMinute = 15
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 14,
                            EndMinute = 55,
                            ProviderId = 2,
                            StartHour = 14,
                            StartMinute = 35,
                            Status = 1,
                            TimeSpanMinute = 20
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 15,
                            EndMinute = 5,
                            ProviderId = 2,
                            StartHour = 14,
                            StartMinute = 55,
                            Status = 1,
                            TimeSpanMinute = 10
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 16,
                            EndMinute = 35,
                            ProviderId = 2,
                            StartHour = 15,
                            StartMinute = 35,
                            Status = 1,
                            TimeSpanMinute = 60
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 17,
                            EndMinute = 15,
                            ProviderId = 2,
                            StartHour = 16,
                            StartMinute = 35,
                            Status = 0,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 17,
                            EndMinute = 55,
                            ProviderId = 2,
                            StartHour = 17,
                            StartMinute = 15,
                            Status = 0,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 18,
                            EndMinute = 35,
                            ProviderId = 2,
                            StartHour = 17,
                            StartMinute = 55,
                            Status = 0,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 19,
                            EndMinute = 20,
                            ProviderId = 2,
                            StartHour = 18,
                            StartMinute = 40,
                            Status = 1,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 20,
                            EndMinute = 20,
                            ProviderId = 2,
                            StartHour = 19,
                            StartMinute = 20,
                            Status = 1,
                            TimeSpanMinute = 60
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 21,
                            EndMinute = 0,
                            ProviderId = 2,
                            StartHour = 20,
                            StartMinute = 20,
                            Status = 1,
                            TimeSpanMinute = 40
                        },
                        new
                        {
                            Id = 21,
                            Code = "",
                            CustomerId = 1,
                            Date = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndHour = 12,
                            EndMinute = 45,
                            FirstName = "فاطمه",
                            LastName = "احمدی",
                            Mobile = "09109566150",
                            ProviderId = 2,
                            StartHour = 12,
                            StartMinute = 5,
                            Status = 1,
                            TimeSpanMinute = 40
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.AppointmentService", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AppointmentServices");

                    b.HasData(
                        new
                        {
                            AppointmentId = 8,
                            ServiceId = 17
                        },
                        new
                        {
                            AppointmentId = 10,
                            ServiceId = 17
                        },
                        new
                        {
                            AppointmentId = 15,
                            ServiceId = 17
                        },
                        new
                        {
                            AppointmentId = 16,
                            ServiceId = 17
                        },
                        new
                        {
                            AppointmentId = 17,
                            ServiceId = 17
                        },
                        new
                        {
                            AppointmentId = 21,
                            ServiceId = 17
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "",
                            FirstName = "فاطمه",
                            LastName = "احمدی",
                            Mobile = "09109566150"
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Providers.Models.ClinicProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "لیزر Adss 2024 با 4 طول موج"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            Name = "دستگاه کویتیلاقری"
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Services.Models.ClinicService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "کل بدن"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "سرویس ناشناخته"
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Services.Models.ProviderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeSpan")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProviderServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Gender = 1,
                            OrderIndex = 1,
                            ProviderId = 1,
                            ProviderName = "لیزر Adss 2024 با 4 طول موج",
                            ServiceId = 1,
                            ServiceName = "کل بدن",
                            TimeSpan = 60
                        });
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.Appointment", b =>
                {
                    b.HasOne("BeautyClinic.API.Features.Appointments.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerId");

                    b.HasOne("BeautyClinic.API.Features.Providers.Models.ClinicProvider", "ClinicProvider")
                        .WithMany("Appointments")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicProvider");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.AppointmentService", b =>
                {
                    b.HasOne("BeautyClinic.API.Features.Appointments.Models.Appointment", "Appointment")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyClinic.API.Features.Services.Models.ClinicService", "ClinicService")
                        .WithMany("AppointmentServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("ClinicService");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Services.Models.ProviderService", b =>
                {
                    b.HasOne("BeautyClinic.API.Features.Providers.Models.ClinicProvider", "ClinicProvider")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyClinic.API.Features.Services.Models.ClinicService", "ClinicService")
                        .WithMany("ProviderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicProvider");

                    b.Navigation("ClinicService");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentServices");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Appointments.Models.Customer", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Providers.Models.ClinicProvider", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ProviderServices");
                });

            modelBuilder.Entity("BeautyClinic.API.Features.Services.Models.ClinicService", b =>
                {
                    b.Navigation("AppointmentServices");

                    b.Navigation("ProviderServices");
                });
#pragma warning restore 612, 618
        }
    }
}
